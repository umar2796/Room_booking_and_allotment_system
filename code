
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <queue>
#include <stack>

using namespace std;

static int roomCount = 0;

class RoomReservation {
    char roomNumber[5], hostName[10], startTime[5], endTime[5], seats[8][4][10];
    queue<string> waitlist;  
    stack<int> seatHistory;  

public:
    void addRoom();
    void bookSeat();
    void undoLastBooking();  // Undo
    void initializeSeats();
    void showRoomDetails();
    void availableRooms();
    void displaySeatingArrangement(int roomIndex);
    void addToWaitlist(string name);  //not implemented yet
};

RoomReservation rooms[10];

void vline(char ch) {
    for (int i = 80; i > 0; i--)
        cout << ch;
}

void RoomReservation::addRoom() {
    cout << "Enter room number: ";
    cin >> rooms[roomCount].roomNumber;
    cout << "Enter Host's name: ";
    cin >> rooms[roomCount].hostName;
    cout << "Enter starting time: ";
    cin >> rooms[roomCount].startTime;
    cout << "Enter ending time: ";
    cin >> rooms[roomCount].endTime;
    initializeSeats();
    roomCount++;
}

void RoomReservation::bookSeat() {
    int seatNumber;
    char roomNo[5];

    cout << "Enter Room number: ";
    cin >> roomNo;
    int n;
    for (n = 0; n < roomCount; n++) {
        if (strcmp(rooms[n].roomNumber, roomNo) == 0)
            break;
    }
    if (n == roomCount) {
        cout << "Room not found. Please enter a valid room number.\n";
        return;
    }

    while (true) {
        cout << "Enter seat number (1-32): ";
        cin >> seatNumber;
        if (seatNumber < 1 || seatNumber > 32) {
            cout << "Invalid seat number. There are only 32 seats available.\n";
        } else {
            if (strcmp(rooms[n].seats[(seatNumber - 1) / 4][(seatNumber - 1) % 4], "Available") == 0) {
                cout << "Enter participant's name: ";
                cin >> rooms[n].seats[(seatNumber - 1) / 4][(seatNumber - 1) % 4];
                seatHistory.push(seatNumber);  // Push the booked seat to the stack
                break;
            } else {
                cout << "Seat already booked. Please choose another seat.\n";
            }
        }
    }
}

void RoomReservation::undoLastBooking() {
    char roomNo[5];
    cout << "Enter Room number: ";
    cin >> roomNo;

    int n;
    for (n = 0; n < roomCount; n++) {
        if (strcmp(rooms[n].roomNumber, roomNo) == 0) {
            break;
        }
    }

    if (n == roomCount) {
        cout << "Room not found. Please enter a valid room number.\n";
        return;
    }

    if (seatHistory.empty()) {
        cout << "No bookings to undo.\n";
    } else {
        int lastSeat = seatHistory.top();  // Get the last booked seat from the stack
        seatHistory.pop();  // Remove it from the stack
        strcpy(rooms[n].seats[(lastSeat - 1) / 4][(lastSeat - 1) % 4], "Available");
        cout << "Undo successful. Seat " << lastSeat << " is now available again.\n";
    }
}

void RoomReservation::initializeSeats() {
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 4; j++) {
            strcpy(rooms[roomCount].seats[i][j], "Available");
        }
    }
}

void RoomReservation::showRoomDetails() {
    char roomNo[5];
    cout << "Enter Room number: ";
    cin >> roomNo;

    int n;
    for (n = 0; n < roomCount; n++) {
        if (strcmp(rooms[n].roomNumber, roomNo) == 0) {
            break;
        }
    }

    if (n < roomCount) {
        vline('*');
        cout << "Room number: " << rooms[n].roomNumber
             << "\nHost: " << rooms[n].hostName
             << "\nStart time: " << rooms[n].startTime
             << "\nEnd time: " << rooms[n].endTime << "\n";
        vline('*');
        displaySeatingArrangement(n);
    } else {
        cout << "Room not found.\n";
    }
}

void RoomReservation::displaySeatingArrangement(int roomIndex) {
    int seatCounter = 0;
    int availableSeats = 0;

    cout << "\nSeating arrangement:\n";
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 4; j++) {
            seatCounter++;
            cout.width(5);
            cout.fill(' ');
            cout << seatCounter << ". " << rooms[roomIndex].seats[i][j];
            if (strcmp(rooms[roomIndex].seats[i][j], "Available") == 0) {
                availableSeats++;
            }
            if (j == 3) cout << "\n"; // New line after every 4 seats
        }
    }
    cout << "\n\nThere are " << availableSeats << " seats available in Room number: " << rooms[roomIndex].roomNumber << ".\n";
}

void RoomReservation::availableRooms() {
    for (int n = 0; n < roomCount; n++) {
        vline('*');
        cout << "Room number: " << rooms[n].roomNumber 
             << "\nHost: " << rooms[n].hostName
             << "\nStart time: " << rooms[n].startTime 
             << "\nEnd time: " << rooms[n].endTime << "\n";
        vline('*');
    }
}

int main() {
    system("cls");
    int choice;
    while (1) {
        cout << "\n\nRoom Reservation System\n";
        cout << "1. Add Room\n"
             << "2. Book a Seat\n"
             << "3. Undo Last Booking\n"
             << "4. Show Room Details\n"
             << "5. List Available Rooms\n"
             << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                rooms[roomCount].addRoom();
                break;
            case 2:
                rooms[roomCount].bookSeat();
                break;
            case 3:
                rooms[roomCount].undoLastBooking();
                break;
            case 4:
                rooms[roomCount].showRoomDetails();
                break;
            case 5:
                rooms[roomCount].availableRooms();
                break;
            case 6:
                exit(0);
        }
    }
    return 0;
}
